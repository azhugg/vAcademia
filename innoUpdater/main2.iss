; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#include ReadReg(HKEY_LOCAL_MACHINE,'Software\Sherlock Software\InnoTools\Downloader','ScriptPath','');

;#define ServerAddress 		"178.63.80.136"
;#define ClientVersion 		"0.4.0.4179_release_G"

#define MyAppExeName		"vacademia.exe"
#define MyAppName "Virtual academia"
#define MyAppVerName "Virtual academia"
#define MyAppPublisher "My Company, Inc."
#define MyAppURL "http://www.vacademia.com/"

[InnoIDE_Settings]
UseRelativePaths=false

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
AppName={cm:cmAppName}
;AppVerName={cm:cmAppName}  ({cm:cmVersion} {#ClientVersion})
AppVerName={cm:cmAppName}  ({cm:cmVersion} {code:GetCurrentVersion})
AppPublisher={cm:cmAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\Virtual Academia
DefaultGroupName={cm:cmAppName}
AppID={{906FD4CE-E1F2-4F86-85BB-510E8724DCE9}
DisableDirPage=yes
DisableProgramGroupPage=yes
OutputBaseFilename=updater
WizardImageFile=setup_icon.bmp
WizardSmallImageFile=setupo_icon_little.bmp
Compression=lzma/Max
SolidCompression=true
UsePreviousAppDir=false
UsePreviousGroup=false
ExtraDiskSpaceRequired=104857600
;для корректной работы нам надо 100 метров на диске
;SetupLogging=false
;DisableWelcomePage=true
DisableReadyMemo=true
DisableReadyPage=true
DisableStartupPrompt=true
TerminalServicesAware=false
ShowTasksTreeLines=false
UsePreviousSetupType=false
UsePreviousTasks=false
AllowRootDirectory=true
EnableDirDoesntExistWarning=false
CreateAppDir=false
DirExistsWarning=no
AlwaysShowComponentsList=false
ShowComponentSizes=false
FlatComponentsList=false
Uninstallable=false
ShowLanguageDialog=no
PrivilegesRequired=none
DisableFinishedPage=true

[Languages]
Name: eng; MessagesFile: Default.isl
Name: rus; MessagesFile: Russian.isl
Name: kzh; MessagesFile: Kazakh.isl
;Name: "english"; MessagesFile: Default.isl;
;Name: "russian"; MessagesFile: Russian.isl;

[CustomMessages]
rus.cmAppName=виртуальная Академия
rus.cmAppPublisher=Virtual Spaces
rus.cmVersion=версия
rus.cmDeletePreviousCaption=Пожалуйста, подождите несколько секунд...
rus.cmLanguageParam=
rus.cmWizardInstalling=Обновление...
rus.cmInstallingLabel=Пожалуйста, подождите, пока Виртуальная академия обновится c
rus.cmInstallingLabel2=до
rus.cmStep1=Инициализация менеджера загрузки файлов...
rus.cmStep2=Установление соединения...
rus.cmStep3=Получение информации обновления...
rus.cmStep4=Загрузка архива...
rus.cmStep4_1=Загружено
rus.cmStep4_2=из
rus.cmStep5=Распаковка...
rus.cmStep5_1=Распаковано
rus.cmStep5_2=%
rus.cmStep6=Копирование...
rus.cmStep7=Обновление информации о версии...
rus.cmStep8=Получение информации об установочном файле...
rus.cmStep9=Загрузка установочного файла...
rus.cmStep9_1=Загружено
rus.cmStep9_2=из
rus.cmStep10=Загрузка установочного файла...
rus.cmStep10_1=Загружено
rus.cmStep10_2=из
rus.cmStep79=Удаление временных файлов...
rus.cmStep80=Обновление успешно завершено.
rus.cmStep80_1=Клиент обновлён до версии
rus.cmStepFinish =Закрыть
rus.cmStepWelcomeNextButton =Обновить
rus.cmStepFormCaption =Программа обновления Виртуальной академии - Оповещения
rus.cmStepFormText1 =Для корректного обновления необходимо закрыть все работающие приложения Виртуальной академии.
rus.cmStepFormText2 =Завершите работу Виртуальной академии и нажмите кнопку "Повторить".
rus.cmStepFormText3 =Для принудительного завершения Виртуальной академии нажмите кнопку "Завершить".
rus.cmStepFormOk =Повторить
rus.cmStepFormCancel =Выход
rus.cmStepFormFinish =Завершить

eng.cmAppName=virtual Academia
eng.cmAppPublisher=Virtual Spaces
eng.cmVersion=version
eng.cmDeletePreviousCaption=Please, wait a minute...
eng.cmLanguageParam=-language=eng
eng.cmWizardInstalling=Updating...
eng.cmInstallingLabel=Please wait while Virtual academia has been updated from
eng.cmInstallingLabel2=to
eng.cmStep1=File download manager initialization...
eng.cmStep2=Connecting...
eng.cmStep3=Getting update information...
eng.cmStep4=Archive downloading...
eng.cmStep4_1=Downloaded
eng.cmStep4_2=from
eng.cmStep5=Unpacking...
eng.cmStep5_1=Unpacked
eng.cmStep5_2=%
eng.cmStep6=File copying...
eng.cmStep7=Client version info updating...
eng.cmStep8=Getting installation file information...
eng.cmStep9=Setup file downloading...
eng.cmStep9_1=Downloaded
eng.cmStep9_2=from
eng.cmStep10=Setup file downloading...
eng.cmStep10_1=Downloaded
eng.cmStep10_2=from
eng.cmStep79=Delete temporary files...
eng.cmStep80=Updating is completed succesfully
eng.cmStep80_1=The client is updated to the version
eng.cmStepFinish =Close
eng.cmStepWelcomeNextButton =Update
eng.cmStepFormCaption =Virtual Academy updating program - Notifications
eng.cmStepFormOK =Repeat
eng.cmStepFormCancel =Exit
eng.cmStepFormText1 =Please, close vAcademia for correct updating.
eng.cmStepFormText2 =Close vAcademia and press Repeat.
eng.cmStepFormText3 =Press Finish to force vAcademia to close
eng.cmStepFormFinish =Finish

kzh.cmAppName=Виртуальная академия
kzh.cmAppPublisher=Virtual Spaces
kzh.cmVersion=версия
kzh.cmDeletePreviousCaption=Бірнеше секунд күте тұруыңызды өтінеміз...
kzh.cmLanguageParam=
kzh.cmWizardInstalling=Жаңарту...
kzh.cmInstallingLabel=Виртуалды академия ... жаңартылғанша күте тұруыңызды өтінеміз
kzh.cmInstallingLabel2=дейін
kzh.cmStep1=Файлдарды жүктеу менеджерін инициализациялау...
kzh.cmStep2=Қосылымды орнату...
kzh.cmStep3=Жаңартылу ақпаратын алу...
kzh.cmStep4=Мұрағатты жүктеу...
kzh.cmStep4_1=Жүктелді
kzh.cmStep4_2=-дан
kzh.cmStep5=Ашу...
kzh.cmStep5_1=Ашылды
kzh.cmStep5_2=%
kzh.cmStep6=Көшіру...
kzh.cmStep7=Версия туралы ақпаратты жаңарту...
kzh.cmStep8=Орнату файлы туралы ақпарат алу...
kzh.cmStep9=Орнату файлын жүктеу...
kzh.cmStep9_1=Жүктелді
kzh.cmStep9_2=-дан
kzh.cmStep10=Орнату файлын жүктеу...
kzh.cmStep10_1=Жүктелді
kzh.cmStep10_2=-дан
kzh.cmStep79=Удаление временных файлов...
kzh.cmStep80=Жаңарту ойдағыдай аяқталды.
kzh.cmStep80_1=Клиент версияға дейін жаңартылды
kzh.cmStepFinish =Жабу
kzh.cmStepWelcomeNextButton =Жаңарту
kzh.cmStepFormCaption =Виртуалды академияны жаңарту бағдарламасы – Хабарландыру
kzh.cmStepFormText1 =Дұрыс жаңарту үшін Виртуалды академияның жұмыс істеп тұрған барлық қосымшаларын жабу керек.
kzh.cmStepFormText2 =Виртуалды академияның жұмысын аяқтап, "Қайталау" түймешесін басыңыз.
kzh.cmStepFormText3 =Виртуалды академияны мәжбүрлеп жабу үшін "Аяқтау" түймешесін басыңыз.
kzh.cmStepFormOk =Қайталау
kzh.cmStepFormCancel =Шығу
kzh.cmStepFormFinish =Аяқтау

rus.cmStepError1 =Авторизация не пройдена
rus.cmStepError2 =Отсутствуют параметры
rus.cmStepError3 =Ошибка взятия информации о версии, файл player.ini не найден
rus.cmStepError4 =Ошибка инициализации менеджера обновления
rus.cmStepError5 =Сервер не доступен
rus.cmStepError6 =Ошибка соединения с сервером
rus.cmStepError7 =Ошибка загрузки информации о файле:
rus.cmStepError8 =Ошибка загрузки файла:
rus.cmStepError9 =Не удалось создать файл (ошибка №1005)
rus.cmStepError10 =Не удалось записать в файл, error №1006
rus.cmStepError11 =Ошибка обновления информации о версии, файл player.ini не найден
rus.cmStepError12 =Ошибка обновления информации о версии
rus.cmStepError13 =Ошибка обновления информации о сервере
rus.cmStepError14 =Ошибка обновления информации о логине
rus.cmStepError15 =Ошибка обновления информации о языке
rus.cmStepError16 =Ошибка обновления информации о заголовке
rus.cmStepError19 =Ошибка копирования файла
rus.cmStepError20 =Неизвестная ошибка
rus.cmStepError21 =Недостаточно места на диске. Установка прервана пользователем
rus.cmStepError22 =У вас недостаточно прав. Обратитесь к администратору
rus.cmStepError23 =Ошибка обновления

eng.cmStepError1 =Authorisation is not passed
eng.cmStepError2 =Parametres are absent
eng.cmStepError3 =Version information getting error: file player.ini is not found
eng.cmStepError4 =Update manager initialization error
eng.cmStepError5 =The server is not accessible
eng.cmStepError6 =Server connection error
eng.cmStepError7 =Information getting error for the file:
eng.cmStepError8 =Download error of file:
eng.cmStepError9 =File creation error (1005)
eng.cmStepError10 =File write error (1006)
eng.cmStepError11 =Version updating error: player.ini is not found
eng.cmStepError12 =Version updating error
eng.cmStepError13 =Server information updating error
eng.cmStepError14 =Login information updating error
eng.cmStepError15 =Language information updating error
eng.cmStepError16 =Title information updating error
eng.cmStepError19 =File copy error
eng.cmStepError20 =Unknown error
eng.cmStepError21 =Not enough disk space. Setup is interrupted by the user
eng.cmStepError22 =You have not enough rights. Contact your network manager
eng.cmStepError23 =Updating error

kzh.cmStepError1 =Авторизация өтпеді
kzh.cmStepError2 =Параметрлер жоқ
kzh.cmStepError3 =Версия туралы ақпаратты алудағы қателік, player.ini файлы табылмады
kzh.cmStepError4 =Жаңарту менеджерін инициализациялаудағы қателік
kzh.cmStepError5 =Серверге қол жеткізу мүмкін емес
kzh.cmStepError6 =Сервермен қосылудағы қателік
kzh.cmStepError7 =Файл туралы ақпаратты жүктеудегі қателік:
kzh.cmStepError8 =Файлды жүктеудегі қателік:
kzh.cmStepError9 =Файлды құру мүмкін болмады (№1005 қателік)
kzh.cmStepError10 =Файлды таспаға жазу мүмкін болмады, error №1006
kzh.cmStepError11 =Версия туралы ақпаратты жаңартудағы қателік, player.ini файлы табылмады
kzh.cmStepError12 =Версия туралы ақпаратты жаңартудағы қателік
kzh.cmStepError13 =Сервер туралы ақпаратты жаңартудағы қателік
kzh.cmStepError14 =Логин туралы ақпаратты жаңартудағы қателік
kzh.cmStepError15 =Тіл туралы ақпаратты жаңартудағы қателік
kzh.cmStepError16 =Тақырып туралы ақпаратты жаңартудағы қателік
kzh.cmStepError19 =Файлды көшірудегі қателік
kzh.cmStepError20 =Белгісіз қателік
kzh.cmStepError21 =Дисктегі орын жеткіліксіз. Пайдаланушы орнатуды үзген
kzh.cmStepError22 =Сіздің құқықтарыңыз жеткіліксіз. әкімшіге жүгініңіз
kzh.cmStepError23 =Жаңартудағы қателік

rus.cmStepErrorInfo1 =а. Обновление виртуальной Академии завершилось неуспешно
rus.cmStepErrorInfo2 =б. Вы можете загрузить последний клиент с сайта Виртуальной академии. Для загрузки перейдите по ссылке:

eng.cmStepErrorInfo1 =a. vAcademia update has failed
eng.cmStepErrorInfo2 =b. You can download the latest client from the vAcademia site here:

kzh.cmStepErrorInfo1 =а. Виртуалды Академияны жаңарту ойдағыдай аяқталмады
kzh.cmStepErrorInfo2 =б. Сіз соңғы клиентті Виртуалды академияның сайтынан жүктей аласыз. Жүктеу үшін ... сілтеме бойынша өтіңіз

rus.cmStepAfterError1 =Попытка переподключения
rus.cmStepAfterError2 =Попытка повторной загрузки информации о файле:
rus.cmStepAfterError3 =Попытка повторной загрузки файла:

eng.cmStepAfterError1 =Reconnection attempt
eng.cmStepAfterError2 =Redownloading of the information on the file:
eng.cmStepAfterError3 =Redownloading of the file:

kzh.cmStepAfterError1 =Қайта қосылуға оқталу
kzh.cmStepAfterError2 =Файл туралы ақпаратты қайталап жүктеуге оқталу:
kzh.cmStepAfterError3 =Файлды қайталап жүктеуге оқталу:

[Messages]

[Components]

[Tasks]

[Files]
Source: innocallback.dll; Flags: dontcopy; DestDir: {tmp}
Source: libcurl.dll; Flags: dontcopy; DestDir: {tmp}
Source: updater.dll; Flags: dontcopy; DestDir: {tmp}
;Source: nmemoryprofiler.dll; Flags: dontcopy
;Source: rtl.dll; Flags: dontcopy
;Source: msvcp71.dll; Flags: dontcopy
;Source: msvcr71.dll; Flags: dontcopy

[Icons]
;Name: "{group}\Virtual academia"; Filename: "{app}\Vacademia.exe"
;Name: {group}\{cm:UninstallProgram,{cm:cmAppName}}; Filename: {uninstallexe}
;Name: {group}\{cm:cmAppName}; Filename: {app}\{#MyAppExeName}; IconFilename: {app}\vacademia.exe; IconIndex: 0; WorkingDir: {app}
;Name: {userdesktop}\{cm:cmAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon; IconFilename: {app}\vacademia.exe; IconIndex: 0; WorkingDir: {app}
;Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{cm:cmAppName}; Filename: {app}\{#MyAppExeName};
;AppVerNameIcon: ({cm:cmVersion} {code:GetCurrentVersion})

[Run]
;Filename: "{app}\#MyAppExeName"; Description: {cm:LaunchProgram,{cm:cmAppName}}; Flags: nowait postinstall skipifsilent
;Filename: "{code:GetOutputDir}\{#MyAppExeName}"; Description: {cm:LaunchProgram,{cm:cmAppName}}; Flags: nowait postinstall skipifsilent; Parameters: {code:GetVAParams}; WorkingDir: {code:GetOutputDir}
Filename: "{code:GetApplicationPath}"; Description: {cm:LaunchProgram,{cm:cmAppName}}; Flags: nowait postinstall skipifsilent; Parameters: {code:GetVAParams}; WorkingDir: "{code:GetOutputDir}"

[Code]
const BM_CLICK    = $00F5;
type
TTimerProc = procedure(HandleW, Msg, idEvent, TimeSys: LongWord);
type hDC = Longint;
	TSize = record cx: UINT; cy: UINT; end;
//type PIneger = @String;
const SRCCOPY = $CC0020;
//const IDI_WARNING = $7F03;//32515;
const IDI_WARNING = 32515;

var
  sMyDownloadURL : string;
  sWarning : string;
  TimeLabel: TLabel;
  TimerID: LongWord;
  TimerID2: LongWord;
  PercentsLabel: TNewStaticText;
  StartInstall: Integer;
//  bInstalling : Boolean;
  UpdatePage: TWizardPage;
//  ProgressPage: TOutputProgressWizardPage;
  TextInfoLabel, URLLabel: TNewStaticText;
  ProgressBar: TNewProgressBar;
  ProgressBarMain: TNewProgressBar;
  MemoError : TNewMemo;

  TotalTime : Integer;
  iStartUpdate : Integer;
  sLanguage : AnsiString;
  sCmdLine : AnsiString;
  bConfirm : Boolean;
  sApplicationPath : String;
  sOutputDir : String;
  iCurStep : Integer;
  sCurrentVersion, sVersion: string;
  sVAParams : AnsiString;

  formCheckPlayerProcess: TSetupForm;
  FinishButton, OKButton, CancelButton: TNewButton;
  MemoErrorForm : TNewMemo;
  BitmapImage: TBitmapImage;
  bKillAll : Boolean;
  ImageStream: Longint; n: Integer;
  BitmapFileName : string;

  FS: TFileStream;
  Bt: array[0..63] of Integer;
  PicStream, MemDC, WinDC: hDC; tmpBitmap: HBitmap;

function WrapTimerProc(callback: TTimerProc; Paramcount: Integer): longword; external 'wrapcallback@files:innocallback.dll stdcall';
function SetTimer(hWnd, nIDEvent, uElapse, lpTimerFunc: LongWord): longword; external 'SetTimer@user32';
function KillTimer(hWnd, nIDEvent: LongWord): LongWord; external 'KillTimer@user32 stdcall delayload';
function GetTickCount: DWord; external 'GetTickCount@kernel32';
//function _sinh_exp( arg : Double): DWord; external '_Sinh@files:msvcp71.dll stdcall';
//function tan_exp( arg : Double): Double; external 'tan@files:msvcr71.dll stdcall';

function curl_easy_init1():String; external 'curl_easy_init@files:libcurl.dll stdcall';
function SetParamsUpdater(path:AnsiString; param:AnsiString):LongWord; external 'SetParamsUpdater_export@files:updater.dll stdcall';
function StartUpdater():LongWord; external 'StartUpdater_export@files:updater.dll stdcall';
function GetClientDir( path : String; size : Integer):Integer; external 'GetClientDir_export@files:updater.dll stdcall';
function GetVacademiaPath( path : String; size : Integer):Integer; external 'GetVacademiaPath_export@files:updater.dll stdcall';
function GetStatus():Integer; external 'GetStatus_export@files:updater.dll stdcall delayload';
function GetOneFileStatus():Integer; external 'GetOneFileStatus_export@files:updater.dll stdcall delayload';
function GetCurrentLoaded():LongWord; external 'GetCurrentLoaded_export@files:updater.dll stdcall delayload';
function GetAllSize():LongWord; external 'GetAllSize_export@files:updater.dll stdcall delayload';
function GetStep():Integer; external 'GetStep_export@files:updater.dll stdcall delayload';
function GetErrorCode():Integer; external 'GetErrorCode_export@files:updater.dll stdcall delayload';
function KIllVA():Boolean; external 'KIllVA_export@files:updater.dll stdcall delayload';
function KIllVAAll():Boolean; external 'KIllVAAll_export@files:updater.dll stdcall delayload';
function IsChangedState():Boolean; external 'IsChangedState_export@files:updater.dll stdcall delayload';
function Destroy():Boolean; external 'Destroy_export@files:updater.dll stdcall delayload';
//function GetInfoText1():PAnsiChar; external 'GetInfoText_export@files:updater.dll stdcall';
function MakeIntResource( dw:LongWord):PAnsiChar; external 'MakeIntResource_export@files:updater.dll stdcall';
function LoadIconWarning( dw:LongWord):LongWord; external 'LoadIconWarning_export@files:updater.dll stdcall';
function OnCancel():Boolean; external 'OnCancel_export@files:updater.dll stdcall delayload';
function OnSiteOpened():Boolean; external 'OnSiteOpened_export@files:updater.dll stdcall delayload';
//function GetServer( server : String; size : Integer):Integer; external 'GetServer_export@files:updater.dll stdcall delayload';
function GetDownloadSiteURL( server : String; size : Integer):Integer; external 'GetDownloadSiteURL_export@files:updater.dll stdcall delayload';
function Quit():Boolean; external 'Quit_export@files:updater.dll stdcall delayload';

function GetDC(Wnd: HWnd): hDC; external 'GetDC@user32.dll stdcall';
function ReleaseDC(Wnd: HWnd; DC: hDC): Longint; external 'ReleaseDC@user32.dll stdcall';

//function CreateDC(lpDriverName, lpDeviceName, lpOutput: String; lpInitData: Integer): Integer; external 'CreateDCA@gdi32.dll stdcall delayload';
//function CreateCompatibleDC(DC: hDC): hDC; external 'CreateCompatibleDC@gdi32 stdcall delayload';
//function CreateCompatibleBitmap(DC: hDC; Width, Height: Integer): HBitmap; external 'CreateCompatibleBitmap@gdi32.dll stdcall delayload';
//function SelectObject(DC: hDC; p2: LongWord): LongWord; external 'SelectObject@gdi32.dll stdcall delayload';
//function DeleteDC(DC: hDC): Boolean; external 'DeleteDC@gdi32.dll stdcall delayload';
//function LoadIcon(Hinstance: Longint; lpIconName : string) : Integer; external 'LoadIcon@user32.dll stdcall delayload';
//function DrawIcon(DC: hDC; X : Integer; Y : Integer; hIcon: LongWord) : Integer; external 'DrawIcon@user32.dll stdcall delayload';

type
  TMessage = record hWnd: HWND; msg, wParam: Word; lParam: LongWord; Time: TFileTime; pt: TPoint; end;
  TPrecompCallback = procedure(progress:integer);

function UnQuote( param : string): String;
var iPos : Integer;
begin
  iPos := Pos( '"', param);
  while iPos > 0 do begin
    Delete( param, iPos, 1);
    iPos := Pos( '"', param);
  end;
  Result := param;
end;

function InitializeSetup(): Boolean;
   var sKey, strLoginPass : string; iPos : Integer;
begin
	sMyDownloadURL := 'http://www.vacademia.com/site/downloadclient';
	bConfirm := True;
	sCmdLine:=GetCmdTail();

	// определим язык
	sLanguage := sCmdLine;
	sKey := '-language "';
	iPos := Pos( sKey, sLanguage);
	if iPos>0 then
	begin
		Delete( sLanguage, 1, iPos + Length(sKey) - 1);
		Delete( sLanguage, 4, Length(sLanguage) - 3);
	end;

	// определим версию. Она показывается во вкладках
	sKey := '-version ';
	sVersion := sCmdLine;
	iPos := Pos( sKey, sVersion);
	if iPos>0 then
	begin
		Delete( sVersion, 1, iPos + Length(sKey) - 1);
		iPos := Pos( ' ', sVersion);
		if iPos>0 then
		begin
			Delete( sVersion, iPos, Length(sVersion) - iPos + 1);
		end;
	end;
	sVersion := UnQuote( sVersion);

	sVAParams := sCmdLine;

  Result := True;
End;

function GetApplicationPath( param : string): String;
  var s : String;
begin
  Result := sApplicationPath;
end;

function GetOutputDir( param : string): String;
begin
  Result := sOutputDir;
end;

function GetVAParams( param : string): String;
begin
	//MsgBox( sVAParams, mbInformation, MB_OK);
  Result := sVAParams;
end;

function GetCurrentVersion(  param : string): String;
var iPos:Integer; strFileIni:AnsiString;
begin
  strFileIni := GetCmdTail();
  iPos := Pos('.exe', strFileIni);
  if iPos > 0 then strFileIni := Copy(strFileIni, 1, iPos+4);
  iPos := Pos(':', strFileIni);
  if iPos > 2 then Delete(strFileIni, 1, iPos-2);
  strFileIni := ExtractFileDir(strFileIni);
  strFileIni := AddBackslash(strFileIni);
  strFileIni := strFileIni + 'Player.ini';
  if IniKeyExists( 'settings', 'version', strFileIni) then begin
     sCurrentVersion := GetIniString( 'settings', 'version', '', strFileIni);
  end;
  //MsgBox( sVersion, mbInformation, MB_OK);
  Result := sCurrentVersion;
end;

Function cm(Message: String): String; Begin Result:= ExpandConstant('{cm:'+ Message +'}')
End;

Function NumToStr(Float: Extended): String;
Begin
    Result:= Format('%.1n', [Float]); StringChange(Result, ',', '.');
    while ((Result[Length(Result)] = '0') or (Result[Length(Result)] = '.')) and (Pos('.', Result) > 0) do
        SetLength(Result, Length(Result)-1);
End;

procedure URLLabelOnClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('open', sMyDownloadURL, '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
  OnSiteOpened();
end;

Function getErrorText( errorCode : Integer) : String;
var
  str : String;
Begin
  //str := ExpandConstant(Format('{cm:cmStepError%s}', [NumToStr(errorCode)]));
    str := ExpandConstant(Format('{cm:cmStepError%s}', [NumToStr(23)]));
 // str2 := Format('%nОбновление Виртуальной академии завершилось неуспешно%n2.	Вы можете скачать последний клиент с сайта Виртуальной академии. Для скачивания откройте ссылку: %n %s', [strurl]);
  Result := str + Chr(13) + Chr(10);
End;

//procedure CloseButtonOnClick(Sender: TObject);
//var
//  ErrorCode: Integer;
//begin
//  WizardForm.Close;
//  ShellExec('open', 'http://www.kyroga.ucoz.ru', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
//end;

procedure CancelButtonClick(CurPage: Integer; var Cancel, Confirm: Boolean);
var
    status:Integer;
begin
 Cancel:=False;
// AnimateWindow(WizardForm.Handle, 1500, AW_IMPLODE);
 Confirm:=bConfirm;
 Cancel:=true;

 status := GetStatus();
 OnCancel();
end;

procedure UpdateStatus(Flags: Integer);   // выполняется с периодичностью, заданной константой Period
var
    step, status, res: Integer; s, sStep:String; bChangeStep:Boolean;Canvas1: TCanvas;
begin
    step := GetStep();
    if step=0 then step:=1;
    sStep := Format('{cm:cmStep%d}', [step]);
    sStep := ExpandConstant(sStep);
    status := GetStatus();
    bChangeStep := false;
    if iCurStep < step then begin
       bChangeStep := true;
       iCurStep := step;
    end;
    if status = 101 then begin
      TextInfoLabel.Font.Style := TextInfoLabel.Font.Style + [fsBold];
      TextInfoLabel.Caption := getErrorText( GetErrorCode());
      MemoError.Text := ExpandConstant('{cm:cmStepErrorInfo1}') + Chr(13) + Chr(10) + ExpandConstant('{cm:cmStepErrorInfo2}');
      MemoError.Width := ScaleX(410);
      ProgressBarMain.Visible := false;
      ProgressBar.Visible := false;
      PercentsLabel.Visible := false;
      URLLabel.Top := MemoError.Top + MemoError.ClientHeight;//Canvas.TextHeight;     

      SetLength(sMyDownloadURL, 1024);
      res := GetDownloadSiteURL(sMyDownloadURL, 1024);
      if res < 0 then begin
         SetLength(sMyDownloadURL, 1024 - res + 1);
         GetDownloadSiteURL(sMyDownloadURL, 1024 - res + 1);
      end;

      URLLabel.Caption := sMyDownloadURL;

      URLLabel.Visible := True;
      MemoError.Visible := True;
      step := 101;
      bConfirm := false;
      WizardForm.CancelButton.Caption := ExpandConstant('{cm:cmStepFinish}');
      WizardForm.CancelButton.Enabled := True;
      KillTimer(0, TimerID);
    end;
    if status = 102 then begin
      KillTimer(0, TimerID);
      Destroy();
    end;
    if(step = 2) then begin
       if status = -1 then TextInfoLabel.Caption := ExpandConstant('{cm:cmStepAfterError1}')
       else ExpandConstant(Format('{cm:cmStep%s}', [NumToStr(step)]));
       if bChangeStep then ProgressBarMain.Position := status;
    end
    else if (step = 3) then begin
        TextInfoLabel.Caption :=sStep;
        if bChangeStep then ProgressBarMain.Position := status;
//        if (step = 4) then begin ProgressBar.Visible := true; end
    end
//    else if(step = 5) then begin
//      s:= GetInfoText1();
//       TextInfoLabel.Caption:=sStep + ' ' + s;
//       if status > 0 then begin
//          ProgressBar.Position := 100;
//          Sleep(10);
//          ProgressBar.Position := 0;
//       end
//       if bChangeStep then ProgressBarMain.Position := status;
//    end
    else if(step = 4) then begin
       //s := GetInfoText1();
       ProgressBar.Visible := true;
       //TextInfoLabel.Caption:= sStep + ' ' + s;
       TextInfoLabel.Caption:= sStep;
       PercentsLabel.Caption:= ExpandConstant('{cm:cmStep4_1}') + ' ' + NumToStr(GetCurrentLoaded()) + ' Kb ' + ExpandConstant('{cm:cmStep4_2}') + ' ' + NumToStr(GetAllSize()) + ' Kb';
       ProgressBar.Position := GetOneFileStatus();
       if status > 0 then begin
         ProgressBarMain.Position := status;
       end;
    end
      else if(step = 5) then begin
       TextInfoLabel.Caption:= sStep;
       PercentsLabel.Caption:= ExpandConstant('{cm:cmStep5_1}') + ' ' + NumToStr(GetCurrentLoaded()) + ' ' + ExpandConstant('{cm:cmStep5_2}');
       ProgressBar.Position := GetOneFileStatus();
       if status > 0 then begin
         ProgressBarMain.Position := status;
       end;
    end
    else if(step = 6) then begin
       PercentsLabel.Visible := false;
       //s := GetInfoText1();
       WizardForm.CancelButton.Enabled := False;
       if TextInfoLabel.Caption <> sStep then begin
           ProgressBar.Position := 0;
       end
       else begin
          if ProgressBar.Position = 100 then ProgressBar.Position := 0;
          ProgressBar.Position := ProgressBar.Position + 1;
       end;
       TextInfoLabel.Caption:= sStep;// +  ' ' + s;
       //ProgressBar.Position := GetOneFileStatus();
       //TextInfoLabel.Caption:= sStep;
       if status > 0 then ProgressBarMain.Position := status;
    end
    else if(step = 7) then begin
       TextInfoLabel.Caption:= sStep;
       if status > 0 then ProgressBarMain.Position := status;
    end
    else if(step = 8) then begin
        WizardForm.CancelButton.Enabled := True;
        if (MemoError.Visible = true) then
        begin
          MemoError.Visible := false;
          URLLabel.Visible := false;
        end;
       TextInfoLabel.Caption:= sStep;
    end
    else if(step = 9) then begin
        WizardForm.CancelButton.Enabled := True;
        if (MemoError.Visible = true) then
        begin
          MemoError.Visible := false;
          URLLabel.Visible := false;
        end;

        ProgressBarMain.Visible := true;
        PercentsLabel.Visible := true;
        ProgressBar.Visible := true;
        TextInfoLabel.Caption:= sStep;
        PercentsLabel.Caption:= ExpandConstant('{cm:cmStep9_1}') + ' ' + NumToStr(GetCurrentLoaded()) + ' Kb ' + ExpandConstant('{cm:cmStep9_2}') + ' ' + NumToStr(GetAllSize()) + ' Kb';
        ProgressBar.Position := GetOneFileStatus();
        ProgressBarMain.Position := status;
    end
    else if(step = 10) then begin
        if (MemoError.Visible = true) then
        begin
          MemoError.Visible := false;
          URLLabel.Visible := false;
        end;

        TextInfoLabel.Caption:= sStep;
        ProgressBarMain.Visible := true;
        PercentsLabel.Visible := true;
        ProgressBar.Visible := true;
        PercentsLabel.Caption:= ExpandConstant('{cm:cmStep10_1}') + ' ' + NumToStr(GetCurrentLoaded()) + ' Kb ' + ExpandConstant('{cm:cmStep10_2}') + ' ' + NumToStr(GetAllSize()) + ' Kb';
        ProgressBar.Position := GetOneFileStatus();
        ProgressBarMain.Position := status;
    end
    else if(step = 79) then begin
       TextInfoLabel.Caption:= sStep;
       ProgressBar.Position := GetOneFileStatus();
       if status > 0 then begin
          ProgressBarMain.Position := status;
       end;
    end
    else if(step = 80) then begin              
         KillTimer(0, TimerID);
         WizardForm.NextButton.Caption := ExpandConstant('{cm:cmStepFormFinish}');
         WizardForm.NextButton.Enabled := True;        
         WizardForm.CancelButton.Enabled := False;
         TextInfoLabel.Caption:= sStep + Chr(13) + Chr(10) + ExpandConstant('{cm:cmStep80_1}') + ' ' + sVersion;
         if status > 0 then ProgressBarMain.Position := status;         
         PostMessage(WizardForm.NextButton.Handle, BM_CLICK, 0, 0);         
    end;
  //  MsgBox('111', mbInformation, MB_OK);
//  end
end;

Procedure MyTimerProc(h, msg, idevent, dwTime: Longword);
var str: string;  res : Integer;
begin
  if (iStartUpdate = 0) then begin
    iStartUpdate := 1;
	// Это пустой шаг, его нужно убрать
  end;
  if (iStartUpdate = 1) then begin
     WizardForm.BackButton.Enabled := False;
     iStartUpdate := 2;
     SetParamsUpdater(sLanguage, sCmdLine);
     SetLength(sOutputDir, 1024);
     res := GetClientDir(sOutputDir, 1024);
     if res < 0 then begin
         SetLength(sOutputDir, 1024 - res + 1);
         GetClientDir(sOutputDir, 1024 - res + 1);
     end;
     SetLength( sApplicationPath, 1024);
     res := GetVacademiaPath( sApplicationPath, 1024);
     //MsgBox( NumToStr(res) + ' ' + sApplicationPath, mbInformation, MB_OK);
     if res < 0 then begin
         SetLength( sApplicationPath, 1024 - res + 1);
         GetVacademiaPath( sApplicationPath, 1024 - res + 1);
     end;           
     StartUpdater();    
  end;
  if (iStartUpdate > 1) then begin
    if (WizardForm.NextButton.Enabled = True) or (TotalTime < 100) then begin
      WizardForm.NextButton.Enabled := False;
    end;
    UpdateStatus(0);
  end
end;

procedure DeinitializeSetup();
begin
//DeinitializeSlideShow;
//KillTimer(0, TimerID);
Quit();
end;

procedure CurPageChanged(CurPageID: Integer);
begin
   if (CurPageID > wpWelcome) AND (CurPageID < wpInstalling) then begin
      WizardForm.NextButton.Enabled := False;
   end
   else if (CurPageID = wpWelcome) then begin        
//       WizardForm.NextButton.Caption := ExpandConstant('{cm:cmStepWelcomeNextButton}');
       TimerID:= SetTimer(0, 0, 50, WrapTimerProc(@MyTimerProc, 4));
       WizardForm.NextButton.onClick(nil);      
   end
 end;

procedure FormButtonFinish( Sender: TObject);
begin
   bKillAll := true;
//  formCheckPlayerProcess.Close();
end;

function NextButtonClick(CurPageID: Integer): Boolean;
//procedure CurPageChanged(CurPageID: Integer);
var
  bRes:Boolean;
begin
Result := True;
case CurPageID of
//    wpReady:
     wpWelcome:
      begin       
         bRes := KIllVA();
         bKillAll := false;
         while(bRes = false) do begin
           MemoErrorForm.Text := ExpandConstant('{cm:cmStepFormText1}') + Chr(13) + Chr(10) + ExpandConstant('{cm:cmStepFormText2}') + Chr(13) + Chr(10) + ExpandConstant('{cm:cmStepFormText3}');
//           MemoErrorForm.AutoSize := True;
//           MemoErrorForm.AdjustHeight();
//            MemoErrorForm.Caption := ExpandConstant('{cm:cmStepFormText1}') + Chr(13) + Chr(10) + ExpandConstant('{cm:cmStepFormText2}') + Chr(13) + Chr(10) + ExpandConstant('{cm:cmStepFormText3}');
            if formCheckPlayerProcess.ShowModal() = mrCancel then  begin
              bConfirm := false;
              bRes := true;
              iStartUpdate := 0;
              WizardForm.Close();
              Result := False;
            end
//            else if formCheckPlayerProcess.ShowModal() = mrYes then begin
              else if bKillAll then begin
              bRes := KIllVAAll();
            end
            else bRes := KIllVA();
        end;         
        if iStartUpdate > 0 then begin
          iStartUpdate := 2;
          WizardForm.BackButton.Enabled := False;
          WizardForm.NextButton.Enabled := False;
          Result := True;
        end
      end;
     wpPreparing:
      begin
          Result := True;
      end;
    wpInstalling:
      begin
          WizardForm.NextButton.Enabled := False;
         Result := True;
      end;
    UpdatePage.ID:
      begin
        if ProgressBarMain.Position > 20 then begin
            Destroy();
            Result := True;
        end
        else  Result := False;
      end;
   wpFinished:
    begin
//       Destroy();
       Result := True;
    end;
  end;
end;

procedure InitializeWizard;
begin

UpdatePage := CreateCustomPage(wpWelcome, ExpandConstant('{cm:cmWizardInstalling}'),  ExpandConstant('{cm:cmInstallingLabel}') + ' ' + sCurrentVersion + ' ' + ExpandConstant('{cm:cmInstallingLabel2}') + ' ' + sVersion);

TotalTime := 0;

TextInfoLabel:= TNewStaticText.Create(UpdatePage);
TextInfoLabel.Left:= 0;
TextInfoLabel.Top:= 0;
TextInfoLabel.Parent := UpdatePage.Surface;
TextInfoLabel.Caption := ExpandConstant('{cm:cmStep1}');
TextInfoLabel.visible := true;

MemoError := TNewMemo.Create(UpdatePage);
MemoError.Left := TextInfoLabel.Left;
MemoError.Top := TextInfoLabel.Top + ScaleY(20);
MemoError.Width := ScaleX(410);
MemoError.Height := ScaleY(50);
//MemoError.Border := 0;
//MemoError.ScrollBars := ssVertical;
//MemoError.Font.Size := MemoError.Font.Size + 2;
MemoError.Text := '';
MemoError.Visible := false;
MemoError.BorderStyle := bsNone;

MemoError.Color := WizardForm.Color;//$dad9d4;
MemoError.Parent := UpdatePage.Surface;

URLLabel := TNewStaticText.Create(WizardForm);
URLLabel.Caption := sMyDownloadURL;
URLLabel.Cursor := crHand;
URLLabel.OnClick := @URLLabelOnClick;
URLLabel.Parent := WizardForm;
{ Alter Font *after* setting Parent so the correct defaults are inherited first }
URLLabel.Font.Style := URLLabel.Font.Style + [fsUnderline];
//URLLabel.Font.Size := MemoError.Font.Size;
URLLabel.Font.Color := clBlue;
URLLabel.Top := ScaleY(110);
URLLabel.Left := MemoError.left;
URLLabel.Visible := false;
URLLabel.Parent := UpdatePage.Surface;


ProgressBar := TNewProgressBar.Create(UpdatePage);
ProgressBar.SetBounds( 0, ScaleY(100), ScaleX(400), ScaleY(20));
ProgressBar.Parent := UpdatePage.Surface;
ProgressBar.max := 100;

ProgressBarMain := TNewProgressBar.Create(UpdatePage);
ProgressBarMain.SetBounds( ProgressBar.Left, ProgressBar.Top + ProgressBar.Height + ScaleY(25), ProgressBar.Width,  ProgressBar.Height);

ProgressBarMain.max := 100;
ProgressBarMain.Parent := UpdatePage.Surface;

PercentsLabel:= TNewStaticText.Create(UpdatePage);
PercentsLabel.Left:= 0;
PercentsLabel.Top:= ProgressBarMain.Top + ProgressBarMain.Height + ScaleY(15);

PercentsLabel.Parent:= UpdatePage.Surface;
 iStartUpdate :=0;
 ProgressBar.Visible := false;
 iCurStep := 1;


formCheckPlayerProcess := CreateCustomForm();
formCheckPlayerProcess.ClientWidth := ScaleX(430);
formCheckPlayerProcess.ClientHeight := ScaleY(200);
formCheckPlayerProcess.Caption := ExpandConstant('{cm:cmStepFormCaption}');
formCheckPlayerProcess.CenterInsideControl(WizardForm, True);

FinishButton := TNewButton.Create(formCheckPlayerProcess);
FinishButton.Parent := formCheckPlayerProcess;
FinishButton.Width := ScaleX(75);
FinishButton.Height := ScaleY(23);
FinishButton.Left := formCheckPlayerProcess.ClientWidth - ScaleX(75 + 6 + 75 + 6 + 75 + 10);
FinishButton.Top := formCheckPlayerProcess.ClientHeight - ScaleY(23 + 10);
FinishButton.Caption := ExpandConstant('{cm:cmStepFormFinish}');
FinishButton.ModalResult := mrOk;
FinishButton.OnClick := @FormButtonFinish;

OKButton := TNewButton.Create(formCheckPlayerProcess);
OKButton.Parent := formCheckPlayerProcess;
OKButton.Width := ScaleX(75);
OKButton.Height := ScaleY(23);
OKButton.Left := formCheckPlayerProcess.ClientWidth - ScaleX(75 + 6 + 75 + 10);
OKButton.Top := formCheckPlayerProcess.ClientHeight - ScaleY(23 + 10);
OKButton.Caption := ExpandConstant('{cm:cmStepFormOk}');
OKButton.ModalResult := mrOk;

CancelButton := TNewButton.Create(formCheckPlayerProcess);
CancelButton.Parent := formCheckPlayerProcess;
CancelButton.Width := ScaleX(75);
CancelButton.Height := ScaleY(23);
CancelButton.Left := formCheckPlayerProcess.ClientWidth - ScaleX(75 + 10);
CancelButton.Top := formCheckPlayerProcess.ClientHeight - ScaleY(23 + 10);
CancelButton.Caption := ExpandConstant('{cm:cmStepFormCancel}');
CancelButton.ModalResult := mrCancel;
CancelButton.Cancel := True;

BitmapImage := TBitmapImage.Create(formCheckPlayerProcess);
//BitmapImage := TGraphic.Create(formCheckPlayerProcess);
BitmapImage.AutoSize := True;
BitmapImage.Left := 10;
BitmapImage.Top := 10;
//BitmapImage.Bitmap.LoadFromFile(BitmapFileName);
BitmapImage.Parent := formCheckPlayerProcess;

MemoErrorForm := TNewMemo.Create(formCheckPlayerProcess);
//MemoErrorForm := TNewStaticText.Create(formCheckPlayerProcess);

MemoErrorForm.Left := ScaleX(10);
MemoErrorForm.Top := ScaleX(10);
MemoErrorForm.Width := formCheckPlayerProcess.ClientWidth - MemoErrorForm.Left*2;
MemoErrorForm.Height := ScaleY(150);
//MsgBox( NumToStr(ImageSize.CX), mbInformation, MB_OK);
//MemoError.Border := 0;
//MemoError.ScrollBars := ssVertical;
MemoErrorForm.Font.Size := MemoError.Font.Size;
MemoErrorForm.Text := '';
MemoErrorForm.BorderStyle := bsNone;
//MemoErrorForm.Caption := '';
MemoErrorForm.Color := WizardForm.Color;//$dad9d4;
MemoErrorForm.Parent := formCheckPlayerProcess;
//TextInfoLabelForm.Caption := ExpandConstant('{cm:cmStepFormCancel}');;

formCheckPlayerProcess.ActiveControl := OKButton;

end;





